{"version":3,"sources":["Components/UserMenu/AuthNav.js","Components/UserMenu/Navigation.js","Components/UserMenu/UserMenu.js","Components/UserMenu/AppBar.js","Components/UserMenu/PrivateRoute.js","Components/UserMenu/PublicRoute.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/contacts/contactsAction.js"],"names":["AuthNav","StyledNavLink","activeClassName","exact","to","styled","NavLink","connect","state","isAuthenticated","authSelectors","getIsAuthenticated","mapDispatchToProps","onLogout","authOperations","logOut","name","getUsername","UserDiv","Span","LogoutButton","type","onClick","span","button","div","isAuntificated","Header","header","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","ContactsView","App","this","onGetCurrentUser","Container","fallback","path","getCurrentUser","items","createReducer","fetchContactsSuccess","_","payload","addContactSuccess","removeContactSuccess","filter","id","loading","addContactRequest","addContactError","removeContactRequest","removeContactError","fetchContactsRequest","fetchContactsError","changedFilter","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","token","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","response","data","message","logIn","getState","persistedToken","get","getError"],"mappings":"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","file":"static/js/main.ae7bce4b.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nconst AuthNav = () => (\r\n  <div>\r\n    <StyledNavLink activeClassName=\"navLink__active\" exact to=\"/register\">\r\n      Registration\r\n    </StyledNavLink>\r\n    <StyledNavLink activeClassName=\"navLink__active\" exact to=\"/login\">\r\n      Log in\r\n    </StyledNavLink>\r\n  </div>\r\n);\r\nexport default AuthNav;\r\nexport const StyledNavLink = styled(NavLink)`\r\n  position: relative;\r\n  display: inline-block;\r\n\r\n  font-family: 'Itim', cursive;\r\n  color: white;\r\n  text-decoration: none;\r\n  padding-bottom: 30px;\r\n  padding-top: 30px;\r\n  padding-right: 10px;\r\n  padding-left: 10px;\r\n\r\n  &:hover {\r\n    background-color: #3f0e40;\r\n  }\r\n  &.navLink__active::before {\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    content: '';\r\n    width: 100%;\r\n    height: 4px;\r\n    background-color: white;\r\n    border-radius: 2px;\r\n  }\r\n`;\r\n","import { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport { StyledNavLink } from './AuthNav';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <div>\r\n    <StyledNavLink activeClassName=\"navLink__active\" exact to=\"/\">\r\n      Main\r\n    </StyledNavLink>\r\n    {isAuthenticated && (\r\n      <StyledNavLink activeClassName=\"navLink__active\" to=\"/contacts\">\r\n        Contacts\r\n      </StyledNavLink>\r\n    )}\r\n  </div>\r\n);\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport styled from 'styled-components';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst UserMenu = ({ name, onLogout }) => (\r\n  <UserDiv>\r\n    <Span>Welcome,{name}!</Span>\r\n    <LogoutButton type=\"button\" onClick={onLogout}>\r\n      <ExitToAppIcon /> Logout\r\n    </LogoutButton>\r\n  </UserDiv>\r\n);\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUsername(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n\r\nconst Span = styled.span`\r\n  margin-right: 15px;\r\n  font-size: 25px;\r\n`;\r\n\r\nconst LogoutButton = styled.button`\r\n  background-color: #fff;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  border: none;\r\n  &:hover {\r\n    background-color: silver;\r\n  }\r\n`;\r\n\r\nconst UserDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import Navigation from './Navigation';\r\nimport UserMEnu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBar = ({ isAuntificated }) => (\r\n  <Header>\r\n    <Navigation />\r\n    {isAuntificated ? <UserMEnu /> : <AuthNav />}\r\n  </Header>\r\n);\r\nconst mapStateToProps = state => ({\r\n  isAuntificated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n\r\nconst Header = styled.header`\r\n  padding-right: 10px;\r\n\r\n  display: flex;\r\n  position: relative;\r\n  justify-content: space-between;\r\n  background-color: #350d36;\r\n  font-family: 'Itim', cursive;\r\n  color: white;\r\n  border-bottom: 1px solid rgb(82, 38, 83);\r\n`;\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, Suspense, lazy } from 'react';\nimport AppBar from './Components/UserMenu/AppBar';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport './styles.css';\nimport { Switch, Route } from 'react-router-dom';\nimport { authOperations } from './redux/auth';\nimport { connect } from 'react-redux';\nimport PrivateRoute from './Components/UserMenu/PrivateRoute';\nimport PublicRoute from './Components/UserMenu/PublicRoute';\nimport styled from 'styled-components';\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst ContactsView = lazy(() => import('./views/ContactsView'));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <AppBar />\n\n          <Suspense fallback={<p>Loading...</p>}>\n            <Switch>\n              <Route exact path=\"/\" component={HomeView} />\n              <PublicRoute\n                path=\"/register\"\n                component={RegisterView}\n                restricted\n                redirectTo=\"/contacts\"\n              />\n              <PublicRoute\n                path=\"/login\"\n                component={LoginView}\n                restricted\n                redirectTo=\"/contacts\"\n              />\n              <PrivateRoute\n                path=\"/contacts\"\n                component={ContactsView}\n                redirectTo=\"/login\"\n              />\n            </Switch>\n          </Suspense>\n        </Container>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n\nexport const Container = styled.div`\n  max-width: 1220px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  changedFilter,\r\n} from './contactsAction';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changedFilter]: (_, { payload }) => payload,\r\n});\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [removeContactError]: (_, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<p>Loading...</p>} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (_, { payload }) => payload,\r\n  [authActions.loginError]: (_, { payload }) => payload,\r\n  [authActions.logoutError]: (_, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({ user, isAuthenticated, token, error });\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\nimport { authSelectors } from '.';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n    token.set(response.data.token);\r\n\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { register, logIn, logOut, getCurrentUser };\r\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\nconst getError = state => state.auth.error;\r\n\r\nexport default { getIsAuthenticated, getUsername, getError };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const removeContactRequest = createAction(\r\n  'contacts/removeContactRequest',\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  'contacts/removeContactSuccess',\r\n);\r\nexport const removeContactError = createAction('contacts/removeContactError');\r\n\r\nexport const changedFilter = createAction('contacts/filterChanged');\r\n"],"sourceRoot":""}